################### Icingabeat Configuration Example #########################

############################# Icingabeat ######################################

icingabeat:

  # Defines the Icina API endpoint
  host: "localhost"

  # Defines the port of the API endpoint
  port: 5665

  # A user with sufficient permissions
  user: "root"

  # Password of the user
  password: "icinga"

  # Skip SSL verification
  skip_ssl_verify: true # for local tests only

  # Icingabeat supports capturing of an evenstream and periodical polling of the
  # Icinga status data.
  eventstream:
    #
    # Decide which events to receive from the event stream.
    # The following event stream types are available:
    #
    # * CheckResult
    # * StateChange
    # * Notification
    # * AcknowledgementSet
    # * AcknowledgementCleared
    # * CommentAdded
    # * CommentRemoved
    # * DowntimeAdded
    # * DowntimeRemoved
    # * DowntimeStarted
    # * DowntimeTriggered
    #
    # To disable eventstream, leave the types empty or comment out the option
    types:
      - CheckResult
      - StateChange

    # Event streams can be filtered by attributes using the prefix 'event.'
    #
    # Example for the CheckResult type with the exit_code set to 2:
    # filter: "event.check_result.exit_status==2"
    #
    # Example for the CheckResult type with the service matching the string
    # pattern "mysql*":
    # filter: 'match("mysql*", event.service)'
    #
    # To disable filtering set an empty string or comment out the filter option
    filter: ""

    # Defines how fast to reconnect to the API on connection loss
    retry_interval: 10s

  statuspoller:
    # Interval at which the status API is called. Set to 0 to disable polling.
    interval: 60s

#================================ General =====================================

# The name of the shipper that publishes the network data. It can be used to group
# all the transactions sent by a single shipper in the web interface.
#name:

# The tags of the shipper are included in their own field with each
# transaction published.
#tags: ["service-X", "web-tier"]

# Optional fields that you can specify to add additional information to the
# output.
#fields:
#  env: staging

#================================ Outputs =====================================

# Configure what outputs to use when sending the data collected by the beat.
# Multiple outputs may be used.

#-------------------------- Elasticsearch output ------------------------------
# output.elasticsearch:
  # Array of hosts to connect to.
  # hosts: ["localhost:9200"]

  # Optional protocol and basic auth credentials.
  #protocol: "https"
  #username: "elastic"
  #password: "changeme"

#----------------------------- Logstash output --------------------------------
output.logstash:
  # The Logstash hosts
  hosts: ["localhost:5044"]

  # Optional SSL. By default is off.
  # List of root certificates for HTTPS server verifications
  #ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]

  # Certificate for SSL client authentication
  #ssl.certificate: "/etc/pki/client/cert.pem"

  # Client Certificate Key
  #ssl.key: "/etc/pki/client/cert.key"

#================================ Logging =====================================

# Sets log level. The default log level is info.
# Available log levels are: critical, error, warning, info, debug
#logging.level: debug

# At debug level, you can selectively enable logging only for some components.
# To enable all selectors use ["*"]. Examples of other selectors are "beat",
# "publish", "service".
#logging.selectors: ["*"]
