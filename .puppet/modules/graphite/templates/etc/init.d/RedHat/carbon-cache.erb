#!/bin/sh
# !!! generated by puppet !!!

# chkconfig: 345 80 20
# description: Start/Stop carbon-cache
# processname: carbon-cache
# config: '<%= scope.lookupvar('graphite::carbon_conf_dir_REAL') %>/carbon.conf'

### BEGIN INIT INFO
# Provides: carbon-cache
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start/Stop carbon-cache
# Description: Enables Graphites carbon-cache data collecting engine
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

PYTHON_CMD='<%= scope.lookupvar('graphite::gr_python_binary') %> -W ignore'
CARBON_DAEMON="cache"
GRAPHITE_DIR="<%= scope.lookupvar('graphite::base_dir_REAL') %>"
PIDFILE_DIR="<%= scope.lookupvar('graphite::storage_dir_REAL') %>"
pidfile=""
OPERATION="$1"
if [ $# -gt 1 ]; then
    shift
    INSTANCES=$*
else
    INSTANCES=$(grep "^\[${CARBON_DAEMON}" <%= scope.lookupvar('graphite::carbon_conf_dir_REAL') %>/carbon.conf | cut -d \[ -f 2 | cut -d \] -f 1 | cut -d : -f 2)
fi

start()
{
    for INSTANCE in ${INSTANCES}; do
        if [ "${INSTANCE}" = "${CARBON_DAEMON}" ]; then
            INSTANCE="a";
        fi;
        pidfile=${PIDFILE_DIR}/carbon-${CARBON_DAEMON}-${INSTANCE}.pid
        prog=carbon-${CARBON_DAEMON}-${INSTANCE}
        # check if instance is already running
        rh_status_q && continue
        
        # If installed from source use this
        CARBON_PY=${GRAPHITE_DIR}/bin/carbon-${CARBON_DAEMON}.py
        # else use /user/bin/carbon-cache
        
        ${PYTHON_CMD} ${CARBON_PY} --instance=${INSTANCE} start;
        retval=$?
        pidfile=${PIDFILE_DIR}/carbon-${CARBON_DAEMON}-${INSTANCE}.pid
        echo -n $"Starting carbon-${CARBON_DAEMON}:${INSTANCE}..."
        sleep 1
        if rh_status_q; then
            touch /var/lock/subsys/carbon-${CARBON_DAEMON}-${INSTANCE}
            echo_success
            echo
        else
            echo_failure
            echo
            exit 1
        fi
    done
    return $retval
}

stop()
{
    for INSTANCE in ${INSTANCES}; do
        if [ "${INSTANCE}" = "${CARBON_DAEMON}" ]; then
            INSTANCE="a";
        fi;
        pidfile=${PIDFILE_DIR}/carbon-${CARBON_DAEMON}-${INSTANCE}.pid
        prog=carbon-${CARBON_DAEMON}-${INSTANCE}
        # check if instance is already stopped
        rh_status_q || continue
        
        ${PYTHON_CMD} ${GRAPHITE_DIR}/bin/carbon-${CARBON_DAEMON}.py --instance=${INSTANCE} stop;
        sleep 3
        while [ -f ${PIDFILE_DIR}/carbon-${CARBON_DAEMON}-${INSTANCE}.pid ]; do
            echo "waiting another 5 secs for carbon-${CARBON_DAEMON}-${INSTANCE} to stop"
            sleep 5
            #TODO: add timer to prevend endless waiting
        done
        rm -f /var/lock/subsys/carbon-${CARBON_DAEMON}-${INSTANCE}
        echo -n $"Stopping carbon-${CARBON_DAEMON}:${INSTANCE}..."
        echo_success
        echo
    done
    return 0
}

restart() {
    # To be sure that at least one intance is always running during restart,
    # we will restart one instance at a time.
    for INSTANCE in ${INSTANCES}; do
        if [ "${INSTANCE}" = "${CARBON_DAEMON}" ]; then
            INSTANCE="a";
        fi;
        pidfile=${PIDFILE_DIR}/carbon-${CARBON_DAEMON}-${INSTANCE}.pid
        prog=carbon-${CARBON_DAEMON}-${INSTANCE}
        
        ${PYTHON_CMD} ${GRAPHITE_DIR}/bin/carbon-${CARBON_DAEMON}.py --instance=${INSTANCE} stop;
        sleep 3
        while [ -f ${PIDFILE_DIR}/carbon-${CARBON_DAEMON}-${INSTANCE}.pid ]; do
            echo "waiting another 5 secs for carbon-${CARBON_DAEMON}-${INSTANCE} to stop"
            sleep 5
            #TODO: add timer to prevend endless waiting
        done
        rm -f /var/lock/subsys/carbon-${CARBON_DAEMON}-${INSTANCE}
        echo -n $"Stopping carbon-${CARBON_DAEMON}:${INSTANCE}..."
        echo_success
        echo
        
        ${PYTHON_CMD} ${GRAPHITE_DIR}/bin/carbon-${CARBON_DAEMON}.py --instance=${INSTANCE} start;
        retval=$?
        pidfile=${PIDFILE_DIR}/carbon-${CARBON_DAEMON}-${INSTANCE}.pid
        echo -n $"Starting carbon-${CARBON_DAEMON}:${INSTANCE}..."
        sleep 1
        if rh_status_q; then
            touch /var/lock/subsys/carbon-${CARBON_DAEMON}-${INSTANCE}
            echo_success
            echo
        else
            echo_failure
            echo
            exit 1
        fi
    done
    return $retval
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "${OPERATION}" in
    start)
        $1
        ;;
    stop)
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        $1
        ;;
    force-reload)
        force_reload
        ;;
    condrestart|try-restart)
        # TODO: bad behavior. only checking instance "a" at the moment
        pidfile=${PIDFILE_DIR}/carbon-${CARBON_DAEMON}-a.pid
        prog=carbon-${CARBON_DAEMON}-a
        rh_status_q || exit 0
        restart
        ;;
    status)
        for INSTANCE in ${INSTANCES}; do
            if [ "${INSTANCE}" = "${CARBON_DAEMON}" ]; then
                INSTANCE="a";
            fi;
            pidfile=${PIDFILE_DIR}/carbon-${CARBON_DAEMON}-${INSTANCE}.pid
            prog=carbon-${CARBON_DAEMON}-${INSTANCE}
            rh_status
        done
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload} [instance instance ...]"
        exit 2
esac
exit $?
