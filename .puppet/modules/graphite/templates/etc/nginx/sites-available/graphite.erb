# Serve static files directly and redirect remaining requests to graphite
server {
	listen   <%= scope.lookupvar('graphite::gr_web_server_port') %>;
	server_name <%= scope.lookupvar('graphite::gr_web_servername') %>;

	client_max_body_size 64M;
	keepalive_timeout 5;

	# static files

	location ^~ /static/ {
		root /usr/share/pyshared/django/contrib/admin;
		access_log off;
	}

	location ^~ /content/ {
		root <%= scope.lookupvar('graphite::graphiteweb_webapp_dir_REAL') %>;
		access_log off;
		expires 30d;
	}

	# proxy remaining requests to graphite

	location / {
<% unless [:undef, nil].include? scope.lookupvar('graphite::nginx_htpasswd') -%>
		auth_basic "You shall not pass";
		auth_basic_user_file /etc/nginx/graphite-htpasswd;
<% end %>
		proxy_pass_header Server;
		proxy_set_header Host $http_host;
		proxy_redirect off;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_connect_timeout 10;
		proxy_read_timeout <%= scope.lookupvar('graphite::nginx_proxy_read_timeout') %>;

		proxy_pass http://<%= scope.lookupvar('graphite::gunicorn_bind') %>;

	<% if scope.lookupvar('graphite::gr_web_cors_allow_from_all') %>
		add_header Access-Control-Allow-Origin "*";
		add_header Access-Control-Allow-Methods "GET, OPTIONS, POST";
		add_header Access-Control-Allow-Headers "origin, authorization, accept";
	<% end %>
	}
}
