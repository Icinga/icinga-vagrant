# Class: prometheus::rabbitmq_exporter
#
# This module manages prometheus rabbitmq_exporter
#
# Parameters:
#  [*arch*]
#  Architecture (amd64 or i386)
#
#  [*bin_dir*]
#  Directory where binaries are located
#
#  [*download_extension*]
#  Extension for the release binary archive
#
#  [*download_url*]
#  Complete URL corresponding to the where the release binary archive can be downloaded
#
#  [*download_url_base*]
#  Base URL for the binary archive
#
#  [*extra_groups*]
#  Extra groups to add the binary user to
#
#  [*extra_options*]
#  Extra options added to the startup command
#
#  [*group*]
#  Group under which the binary is running
#
#  [*init_style*]
#  Service startup scripts style (e.g. rc, upstart or systemd)
#
#  [*install_method*]
#  Installation method: url or package (only url is supported currently)
#
#  [*manage_group*]
#  Whether to create a group for or rely on external code for that
#
#  [*manage_service*]
#  Should puppet manage the service? (default true)
#
#  [*manage_user*]
#  Whether to create user or rely on external code for that
#
#  [*os*]
#  Operating system (linux is the only one supported)
#
#  [*package_ensure*]
#  If package, then use this for package ensure default 'latest'
#
#  [*package_name*]
#  The binary package name - not available yet
#
#  [*purge_config_dir*]
#  Purge config files no longer generated by Puppet
#
#  [*restart_on_change*]
#  Should puppet restart the service on configuration change? (default true)
#
#  [*service_enable*]
#  Whether to enable the service from puppet (default true)
#
#  [*service_ensure*]
#  State ensured for the service (default 'running')
#
#  [*user*]
#  User which runs the service
#
#  [*version*]
#  The binary release version
#
#  [*rabbit_url*]
#  URL of the RabbitMQ management plugin
#
#  [*rabbit_user*]
#  User to authenticate against RabbitMQ
#
#  [*rabbit_password*]
#  Password to authenticate against RabbitMQ
#
#  [*queues_include_regex*]
#  Regular expression used by the exported to chose which queues to export
#
#  [*queues_exclude_regex*]
#  Regular expression used by the exported to chose which queues NOT to export
#
#  [*rabbit_capabilities*]
#  Special capabilities supported by the RabbitMQ version. See README for more details.
#  (default '')
#
#  [*rabbit_exporters*]
#  Which exporter modules should be loaded by default
#  (default 'exchange,node,overview,queue')
#
#  [*extra_env_vars*]
#  Additional environment variables that should be supplied to the exporter, as a hash of key:value
#  (default {})
#

class prometheus::rabbitmq_exporter (
  String $download_url_base,
  Array[String] $extra_groups,
  String $group,
  String $package_ensure,
  String $package_name,
  String $download_extension,
  String $user,
  String $version,
  String $rabbit_url,
  String $rabbit_user,
  String $rabbit_password,
  String $queues_include_regex,
  String $queues_exclude_regex,
  Array[String] $rabbit_capabilities,
  Array[String] $rabbit_exporters,
  String $arch                        = $prometheus::real_arch,
  String $bin_dir                     = $prometheus::bin_dir,
  Optional[String] $download_url      = undef,
  String $extra_options               = '',
  String $init_style                  = $prometheus::init_style,
  String $install_method              = $prometheus::install_method,
  Boolean $manage_group               = true,
  Boolean $manage_service             = true,
  Boolean $manage_user                = true,
  String $os                          = $prometheus::os,
  Boolean $purge_config_dir           = true,
  Boolean $restart_on_change          = true,
  Boolean $service_enable             = true,
  String $service_ensure              = 'running',
  Hash[String,String] $extra_env_vars = {},
  Boolean $export_scrape_job          = false,
  Stdlib::Port $scrape_port           = 9090,
  String[1] $scrape_job_name          = 'rabbitmq',
  Optional[Hash] $scrape_job_labels   = undef,
) inherits prometheus {

  $real_download_url    = pick($download_url, "${download_url_base}/download/v${version}/${package_name}-${version}.${os}-${arch}.${download_extension}")
  $notify_service = $restart_on_change ? {
    true    => Service['rabbitmq_exporter'],
    default => undef,
  }

  $env_vars = {
    'RABBIT_URL'          => $rabbit_url,
    'RABBIT_USER'         => $rabbit_user,
    'RABBIT_PASSWORD'     => $rabbit_password,
    'INCLUDE_QUEUES'      => $queues_include_regex,
    'SKIP_QUEUES'         => $queues_exclude_regex,
    'RABBIT_CAPABILITIES' => join($rabbit_capabilities, ','),
    'RABBIT_EXPORTERS'    => join($rabbit_exporters, ','),
  }

  $real_env_vars = merge($env_vars, $extra_env_vars)

  prometheus::daemon { 'rabbitmq_exporter':
    install_method     => $install_method,
    version            => $version,
    download_extension => $download_extension,
    os                 => $os,
    arch               => $arch,
    real_download_url  => $real_download_url,
    bin_dir            => $bin_dir,
    notify_service     => $notify_service,
    package_name       => $package_name,
    package_ensure     => $package_ensure,
    manage_user        => $manage_user,
    user               => $user,
    extra_groups       => $extra_groups,
    group              => $group,
    manage_group       => $manage_group,
    purge              => $purge_config_dir,
    options            => $extra_options,
    init_style         => $init_style,
    service_ensure     => $service_ensure,
    service_enable     => $service_enable,
    manage_service     => $manage_service,
    env_vars           => $real_env_vars,
    export_scrape_job  => $export_scrape_job,
    scrape_port        => $scrape_port,
    scrape_job_name    => $scrape_job_name,
    scrape_job_labels  => $scrape_job_labels,
  }
}
